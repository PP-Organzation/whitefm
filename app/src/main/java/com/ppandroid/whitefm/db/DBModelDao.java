package com.ppandroid.whitefm.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.ppandroid.whitefm.db.base.GreenDaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DBMODEL.
*/
public class DBModelDao extends AbstractDao<DBModel, Long> {

    public static final String TABLENAME = "DBMODEL";

    /**
     * Properties of entity DBModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HttpUrl = new Property(1, String.class, "httpUrl", false, "HTTP_URL");
        public final static Property ExtraKey = new Property(2, String.class, "extraKey", false, "EXTRA_KEY");
        public final static Property Json = new Property(3, String.class, "json", false, "JSON");
        public final static Property LastestTime = new Property(4, java.util.Date.class, "lastestTime", false, "LASTEST_TIME");
    };


    public DBModelDao(DaoConfig config) {
        super(config);
    }
    
    public DBModelDao(DaoConfig config, GreenDaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBMODEL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HTTP_URL' TEXT," + // 1: httpUrl
                "'EXTRA_KEY' TEXT," + // 2: extraKey
                "'JSON' TEXT," + // 3: json
                "'LASTEST_TIME' INTEGER);"); // 4: lastestTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBMODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String httpUrl = entity.getHttpUrl();
        if (httpUrl != null) {
            stmt.bindString(2, httpUrl);
        }
 
        String extraKey = entity.getExtraKey();
        if (extraKey != null) {
            stmt.bindString(3, extraKey);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(4, json);
        }
 
        java.util.Date lastestTime = entity.getLastestTime();
        if (lastestTime != null) {
            stmt.bindLong(5, lastestTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBModel readEntity(Cursor cursor, int offset) {
        DBModel entity = new DBModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // httpUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // extraKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // json
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // lastestTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHttpUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExtraKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastestTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
