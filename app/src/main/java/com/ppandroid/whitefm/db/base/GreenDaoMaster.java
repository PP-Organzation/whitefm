package com.ppandroid.whitefm.db.base;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

import com.ppandroid.whitefm.MApplication;
import com.ppandroid.whitefm.constant.ConstantParams;
import com.ppandroid.whitefm.utils.Utils_Debug;
import com.ppandroid.whitefm.utils.Utils_SharedPreferences;

import java.util.HashMap;
import java.util.Iterator;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class GreenDaoMaster extends AbstractDaoMaster
{
    private static HashMap<String,GreenDaoInterface> daoHashMap;
    private static int SCHEMA_VERSION;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists)
    {
        Iterator<String> iterator = daoHashMap.keySet().iterator();
        while(iterator.hasNext()){
            try {
				String className = iterator.next();
				GreenDaoInterface greenDaoInterface = daoHashMap.get(className);
				greenDaoInterface.createTable(db,ifNotExists);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists)
    {
        Iterator<String> iterator = daoHashMap.keySet().iterator();
        while(iterator.hasNext()){
            try {
				String className = iterator.next();
				GreenDaoInterface greenDaoInterface = daoHashMap.get(className);
				greenDaoInterface.dropTable(db, ifExists);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }

    public static void updateAllTables(SQLiteDatabase db, int oldVersion, int newVersion)
    {
        Iterator<String> iterator = daoHashMap.keySet().iterator();
        while(iterator.hasNext()){
            try {
				String className = iterator.next();
				GreenDaoInterface greenDaoInterface = daoHashMap.get(className);
				greenDaoInterface.onUpTable(db,oldVersion,newVersion);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        
        Utils_SharedPreferences sharedPreferences = 
				new Utils_SharedPreferences(MApplication.getContext(), ConstantParams.sharePreferenceFileName);
		sharedPreferences.clear();
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper
    {
        public OpenHelper(Context context, String name, CursorFactory factory,int schema_version)
        {
            super(context, name, factory, schema_version);
            SCHEMA_VERSION = schema_version;
        }

        @Override
        public void onCreate(SQLiteDatabase db)
        {
            Utils_Debug.i("Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, true);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper
    {
        public DevOpenHelper(Context context, String name, CursorFactory factory//
                , HashMap<String, GreenDaoInterface> daos,int schema_version){
        	super(context, name, factory,schema_version);
            daoHashMap = daos;
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
        {
            Utils_Debug.e("updating DB schema version from " + oldVersion + " to " + newVersion);
            updateAllTables(db, oldVersion, newVersion);
            dropAllTables(db, true);
            onCreate(db);
        }

		@Override
		public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Cursor cursor = db.rawQuery("select name from sqlite_master where type='table' order by name",null);
	        while (cursor.moveToNext()) {
	            String name = cursor.getString(0);
	            Utils_Debug.v("@@@@@@@@@@@@@@@ tableName = " + name);
	            db.execSQL("DELETE FROM " + name);
	        }
	        if(cursor!=null&&!cursor.isClosed()){
	            cursor.close();
	        }
		}
    }

    public GreenDaoMaster(SQLiteDatabase db)
    {
        super(db, SCHEMA_VERSION);
        try {
            Iterator<String> iterator = daoHashMap.keySet().iterator();
            while(iterator.hasNext()){
                String className = iterator.next();
                Class clazz = Class.forName(className);
                try {
                	Utils_Debug.i(className);
					registerDaoClass(clazz);
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public GreenDaoSession newSession()
    {
        return new GreenDaoSession(db, IdentityScopeType.Session, daoConfigMap,daoHashMap);
    }

    @Override
    public GreenDaoSession newSession(IdentityScopeType type)
    {
        return new GreenDaoSession(db, type, daoConfigMap,daoHashMap);
    }

}
